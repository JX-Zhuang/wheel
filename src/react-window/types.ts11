import {
    Component,
    ComponentType,
    CSSProperties,
    Ref,
    Key,
    FunctionComponent,
    ComponentClass
} from "react";

export type CSSDirection = "ltr" | "rtl";
export type Direction = "vertical" | "horizontal"; // TODO: deprecate in favour of Layout
export type Layout = "vertical" | "horizontal";
export type ScrollDirection = "forward" | "backward";
export type Align = "auto" | "smart" | "center" | "end" | "start";

export interface ListChildComponentProps {
    index: number;
    style: CSSProperties;
    data: any;
    isScrolling?: boolean;
}

export interface GridChildComponentProps {
    columnIndex: number;
    rowIndex: number;
    style: CSSProperties;
    data: any;
    isScrolling?: boolean;
}


export type ReactElementType =
    | FunctionComponent<any>
    | ComponentClass<any>
    | string;

export interface CommonProps {
    className?: string;
    innerElementType?: ReactElementType;
    innerRef?: Ref<any>;
    innerTagName?: string;
    itemData?: any;
    outerElementType?: ReactElementType;
    outerRef?: Ref<any>;
    outerTagName?: string;
    style?: CSSProperties;
    useIsScrolling?: boolean;
}

export type ListItemKeySelector = (index: number, data: any) => Key;

export interface ListOnItemsRenderedProps {
    overscanStartIndex: number;
    overscanStopIndex: number;
    visibleStartIndex: number;
    visibleStopIndex: number;
}

export interface ListOnScrollProps {
    scrollDirection: ScrollDirection;
    scrollOffset: number;
    scrollUpdateWasRequested: boolean;
}

export interface ListProps extends CommonProps {
    children: ComponentType<ListChildComponentProps>;
    height: number | string;
    itemCount: number;
    width: number | string;
    direction?: CSSDirection | Direction;
    layout?: Layout;
    initialScrollOffset?: number;
    itemKey?: ListItemKeySelector;
    overscanCount?: number;
    onItemsRendered?: (props: ListOnItemsRenderedProps) => any;
    onScroll?: (props: ListOnScrollProps) => any;
}

export type GridItemKeySelector = (params: {
    columnIndex: number;
    rowIndex: number;
    data: any;
}) => Key;

export interface GridOnItemsRenderedProps {
    overscanColumnStartIndex: number;
    overscanColumnStopIndex: number;
    overscanRowStartIndex: number;
    overscanRowStopIndex: number;
    visibleColumnStartIndex: number;
    visibleColumnStopIndex: number;
    visibleRowStartIndex: number;
    visibleRowStopIndex: number;
}

export interface GridOnScrollProps {
    horizontalScrollDirection: ScrollDirection;
    scrollLeft: number;
    scrollTop: number;
    scrollUpdateWasRequested: boolean;
    verticalScrollDirection: ScrollDirection;
}

export interface GridProps extends CommonProps {
    children: ComponentType<GridChildComponentProps>;
    columnCount: number;
    direction?: CSSDirection;
    height: number;
    initialScrollLeft?: number;
    initialScrollTop?: number;
    itemKey?: GridItemKeySelector;
    onItemsRendered?: (props: GridOnItemsRenderedProps) => any;
    onScroll?: (props: GridOnScrollProps) => any;
    overscanColumnsCount?: number;
    overscanColumnCount?: number;
    overscanRowsCount?: number;
    overscanRowCount?: number;
    overscanCount?: number;
    rowCount: number;
    width: number;
}

export interface FixedSizeListProps extends ListProps {
    itemSize: number;
}

export interface VariableSizeListProps extends ListProps {
    estimatedItemSize?: number;
    itemSize: (index: number) => number;
}

export interface FixedSizeGridProps extends GridProps {
    columnWidth: number;
    rowHeight: number;
}

export interface VariableSizeGridProps extends GridProps {
    columnWidth: (index: number) => number;
    estimatedColumnWidth?: number;
    estimatedRowHeight?: number;
    rowHeight: (index: number) => number;
}

export class FixedSizeList extends Component<FixedSizeListProps> {
    scrollTo(scrollOffset: number): void;
    scrollToItem(index: number, align?: Align): void;
}

export class VariableSizeList extends Component<VariableSizeListProps> {
    scrollTo(scrollOffset: number): void;
    scrollToItem(index: number, align?: Align): void;
    resetAfterIndex(index: number, shouldForceUpdate?: boolean): void;
}

export class FixedSizeGrid extends Component<FixedSizeGridProps> {
    scrollTo(params: { scrollLeft: number; scrollTop: number }): void;
    scrollToItem(params: {
        align?: Align;
        columnIndex?: number;
        rowIndex?: number;
    }): void;
}

export class VariableSizeGrid extends Component<VariableSizeGridProps> {
    scrollTo(params: { scrollLeft: number; scrollTop: number }): void;
    scrollToItem(params: {
        align?: Align;
        columnIndex?: number;
        rowIndex?: number;
    }): void;
    resetAfterColumnIndex(index: number, shouldForceUpdate?: boolean): void;
    resetAfterIndices(params: {
        columnIndex: number;
        rowIndex: number;
        shouldForceUpdate?: boolean;
    }): void;
    resetAfterRowIndex(index: number, shouldForceUpdate?: boolean): void;
}
export function areEqual(
    prevProps: Readonly<object>,
    nextProps: Readonly<object>
): boolean;
export function shouldComponentUpdate<P = {}, S = {}>(
    this: { props: P; state: S },
    nextProps: Readonly<P>,
    nextState: Readonly<S>
): boolean;
